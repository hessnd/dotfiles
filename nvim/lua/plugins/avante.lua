return {
  -- {
  --   "ravitemer/mcphub.nvim",
  --   dependencies = {
  --     "nvim-lua/plenary.nvim",
  --   },
  --   build = "npm install -g mcp-hub@latest", -- Installs `mcp-hub` node binary globally
  --   config = function()
  --     require("mcphub").setup({
  --       extensions = {
  --         avante = {
  --           make_slash_commands = true,
  --         },
  --       },
  --     })
  --   end,
  -- },
  -- {
  --   "yetone/avante.nvim",
  --   event = "VeryLazy",
  --   version = false,
  --   opts = {
  --     -- add any opts here
  --     provider = "claude",
  --     providers = {
  --       -- openai = {
  --       --   endpoint = "https://api.openai.com/v1",
  --       --   model = "gpt-4o", -- your desired model (or use gpt-4o, etc.)
  --       --   timeout = 30000, -- Timeout in milliseconds, increase this for reasoning models
  --       --   extra_request_body = {
  --       --     temperature = 0,
  --       --     max_completion_tokens = 15000, -- Increase this to include reasoning tokens (for reasoning models)
  --       --     -- reasoning_effort = "medium", -- low|medium|high, only used for reasoning models
  --       --   },
  --       -- },
  --       -- claude = {
  --       --   endpoint = "https://api.anthropic.com",
  --       --   model = "claude-sonnet-4-20250514",
  --       --   timeout = 30000, -- Timeout in milliseconds
  --       --   extra_request_body = {
  --       --     temperature = 0,
  --       --     max_tokens = 4096,
  --       --   },
  --       -- },
  --     },
  --     web_search_engine = {
  --       provider = "kagi",
  --     },
  --     selector = {
  --       exclude_auto_select = { "NvimTree" },
  --     },
  --     behaviour = {
  --       auto_suggestions = false, -- Experimental stage
  --     },
  --   },
  --   keys = {
  --     {
  --       "<leader>a+",
  --       function()
  --         local tree_ext = require("avante.extensions.nvim_tree")
  --         tree_ext.add_file()
  --       end,
  --       desc = "Select file in NvimTree",
  --       ft = "NvimTree",
  --     },
  --     {
  --       "<leader>a-",
  --       function()
  --         local tree_ext = require("avante.extensions.nvim_tree")
  --         tree_ext.remove_file()
  --       end,
  --       desc = "Deselect file in NvimTree",
  --       ft = "NvimTree",
  --     },
  --   },
  --   -- system_prompt as function ensures LLM always has latest MCP server state
  --   -- This is evaluated for every message, even in existing chats
  --   system_prompt = function()
  --     local hub = require("mcphub").get_hub_instance()
  --     return hub and hub:get_active_servers_prompt() or ""
  --   end,
  --   -- Using function prevents requiring mcphub before it's loaded
  --   custom_tools = function()
  --     return {
  --       require("mcphub.extensions.avante").mcp_tool(),
  --     }
  --   end,
  --   disabled_tools = {
  --     "list_files", -- Built-in file operations
  --     "search_files",
  --     "read_file",
  --     "create_file",
  --     "rename_file",
  --     "delete_file",
  --     "create_dir",
  --     "rename_dir",
  --     "delete_dir",
  --     "bash", -- Built-in terminal access
  --   },
  --   -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  --   build = "make",
  --   -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
  --   dependencies = {
  --     "nvim-lua/plenary.nvim",
  --     "MunifTanjim/nui.nvim",
  --     --- The below dependencies are optional,
  --     "echasnovski/mini.pick", -- for file_selector provider mini.pick
  --     "nvim-telescope/telescope.nvim", -- for file_selector provider telescope
  --     "hrsh7th/nvim-cmp", -- autocompletion for avante commands and mentions
  --     "ibhagwan/fzf-lua", -- for file_selector provider fzf
  --     "stevearc/dressing.nvim", -- for input provider dressing
  --     "folke/snacks.nvim", -- for input provider snacks
  --     "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
  --     "zbirenbaum/copilot.lua", -- for providers='copilot'
  --     {
  --       -- support for image pasting
  --       "HakonHarnes/img-clip.nvim",
  --       event = "VeryLazy",
  --       opts = {
  --         -- recommended settings
  --         default = {
  --           embed_image_as_base64 = false,
  --           prompt_for_file_name = false,
  --           drag_and_drop = {
  --             insert_mode = true,
  --           },
  --           -- required for Windows users
  --           use_absolute_path = true,
  --         },
  --       },
  --     },
  --     {
  --       -- Make sure to set this up properly if you have lazy=true
  --       "MeanderingProgrammer/render-markdown.nvim",
  --       opts = {
  --         file_types = { "markdown", "Avante" },
  --       },
  --       ft = { "markdown", "Avante" },
  --     },
  --   },
  -- },
}
