-- local status, lsp = pcall(require, "lsp-zero")
-- if (not status) then return end
--
-- lsp.preset('recommended')
--
-- lsp.ensure_installed({
--   'html',
--   'cssls',
--   'eslint',
--   'graphql',
--   'jsonls',
--   'lua_ls',
--   'tsserver',
--   'tailwindcss',
--   'yamlls'
-- })
--
-- lsp.nvim_workspace()
--
-- local cmp = require('cmp')
-- local cmp_select = { behavior = cmp.SelectBehavior.Select }
-- local cmp_mappings = lsp.defaults.cmp_mappings({
--   ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
--   ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
--   ['<C-y>'] = cmp.mapping.confirm({ select = true }),
--   ["<C-Space>"] = cmp.mapping.complete(),
-- })
--
-- -- cmp_mappings['<Tab>'] = nil
-- -- cmp_mappings['<S-Tab>'] = nil
--
-- local function border(hl_name)
--   return {
--     { "╭", hl_name },
--     { "─", hl_name },
--     { "╮", hl_name },
--     { "│", hl_name },
--     { "╯", hl_name },
--     { "─", hl_name },
--     { "╰", hl_name },
--     { "│", hl_name },
--   }
-- end
--
-- lsp.setup_nvim_cmp({
--   mapping = cmp_mappings
-- })
--
-- lsp.set_preferences({
--   suggest_lsp_servers = false,
--   sign_icons = {
--     error = 'E',
--     warn = 'W',
--     hint = 'H',
--     info = 'I'
--   }
-- })
--
-- lsp.on_attach(function(client, bufnr)
--   local opts = { buffer = bufnr, remap = false }
--
--   -- vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
--   -- vim.keymap.set("n", "gr", '<cmd>Telescope lsp_references<cr>', { buffer = true })
--   vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
--   vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--   vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
--   vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
--   vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
--   vim.keymap.set("n", "<leader>ca", function() vim.lsp.buf.code_action() end, opts)
--   vim.keymap.set("n", "<leader>rr", function() vim.lsp.buf.references() end, opts)
--   vim.keymap.set("n", "<leader>rn", function() vim.lsp.buf.rename() end, opts)
--   vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
-- end)
--
-- lsp.format_on_save({
--   format_opts = {
--     timeout_ms = 1000,
--   },
--   servers = {
--     ['eslint'] = { 'javascript', 'typescript', 'typescriptreact', 'typescript.tsx' },
--     ['lua_ls'] = { 'lua' },
--   }
-- })
--
-- lsp.skip_server_setup({ 'tsserver' })
--
-- require('lspconfig').yamlls.setup({
--   root_dir = require('lspconfig.util').root_pattern(".git", vim.fn.getcwd()),
--   settings = {
--     yaml = {
--       schemas = {
--         ["https://json.schemastore.org/github-workflow.json"] = "/.github/*"
--       }
--     }
--   }
-- })
--
-- require('lspconfig').eslint.setup({
--   on_attach = require('lsp.eslint').on_attach,
--   settings = require('lsp.eslint').settings,
-- })
--
-- require('lspconfig').jsonls.setup({
--   settings = require('lsp.jsonls').settings,
-- })
--
-- lsp.setup()
--
-- require('typescript').setup({
--   server = {
--     capabilities = require('lsp.tsserver').capabilities,
--     handlers = require('lsp.tsserver').handlers,
--     on_attach = require('lsp.tsserver').on_attach,
--     settings = require('lsp.tsserver').settings,
--   }
-- })
--
-- local null_ls = require("null-ls")
-- null_ls.setup({
--   sources = {
--     require("null-ls").builtins.diagnostics.codespell.with({
--       filetypes = { "markdown", "text" },
--     }),
--     require("typescript.extensions.null-ls.code-actions"),
--     -- null_ls.builtins.formatting.prettierd,
--     -- null_ls.builtins.diagnostics.eslint.with({
--     --   diagnostics_format = '[eslint] #{m}\n(#{c})'
--     -- }),
--   }
-- })
--
-- require('mason-null-ls').setup({
--   ensure_installed = nil,
--   automatic_installation = true,
-- })
--
-- local has_words_before = function()
--   if vim.api.nvim_buf_get_option(0, "buftype") == "prompt" then return false end
--   local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--   return col ~= 0 and vim.api.nvim_buf_get_text(0, line - 1, 0, line - 1, col, {})[1]:match("^%s*$") == nil
-- end
--
-- cmp.setup({
--   window = {
--     completion = {
--       border = border "CmpBorder",
--       winhighlight = "Normal:CmpPmenu,CursorLine:PmenuSel,Search:None",
--     },
--     documentation = {
--       border = border "CmpDocBorder",
--     },
--   },
--   sources = {
--     { name = 'copilot' },
--     { name = 'path' },
--     { name = 'nvim_lsp' },
--     { name = 'buffer', keyword_length = 3 },
--     { name = 'luasnip', keyword_length = 2 },
--   },
--   mapping = {
--     ['<CR>'] = cmp.mapping.confirm({
--       -- documentation says this is important.
--       -- I don't know why.
--       behavior = cmp.ConfirmBehavior.Replace,
--       select = false,
--     }),
--     ["<Tab>"] = vim.schedule_wrap(function(fallback)
--       if cmp.visible() and has_words_before() then
--         cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
--       else
--         fallback()
--       end
--     end),
--   },
--   formatting = {
--     fields = { 'abbr', 'kind', 'menu' },
--     format = require('lspkind').cmp_format({
--       mode = 'symbol', -- show only symbol annotations
--       maxwidth = 50, -- prevent the popup from showing more than provided characters
--       ellipsis_char = '...', -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead
--     })
--   },
-- })
--
-- vim.diagnostic.config({
--   virtual_text = true
-- })
