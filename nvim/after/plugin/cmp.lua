-- local status, cmp = pcall(require, "cmp")
-- if (not status) then return end
-- local lspkind = require("lspkind")
-- local luasnip = require("luasnip")
--
-- local function border(hl_name)
--   return {
--     { "╭", hl_name },
--     { "─", hl_name },
--     { "╮", hl_name },
--     { "│", hl_name },
--     { "╯", hl_name },
--     { "─", hl_name },
--     { "╰", hl_name },
--     { "│", hl_name },
--   }
-- end
--
-- local cmp_window = require "cmp.utils.window"
--
-- -- Copilot settings
-- local has_words_before = function()
--   unpack = unpack or table.unpack
--   if vim.api.nvim_buf_get_option(0, "buftype") == "prompt" then return false end
--   local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--   return col ~= 0 and vim.api.nvim_buf_get_text(0, line-1, 0, line-1, col, {})[1]:match("^%s*$") == nil
-- end
--
-- cmp_window.info_ = cmp_window.info
-- cmp_window.info = function(self)
--   local info = self:info_()
--   info.scrollable = false
--   return info
-- end
--
-- cmp.setup({
--   window = {
--     completion = {
--       border = border "CmpBorder",
--       winhighlight = "Normal:CmpPmenu,CursorLine:PmenuSel,Search:None",
--     },
--     documentation = {
--       border = border "CmpDocBorder",
--     },
--   },
--   snippet = {
--     expand = function(args)
--       require("luasnip").lsp_expand(args.body)
--     end,
--   },
--   formatting = {
--     format = lspkind.cmp_format({ with_text = false, maxwidth = 50 })
--   },
--   mapping = cmp.mapping.preset.insert({
--     ["<C-p>"] = cmp.mapping.select_prev_item(),
--     ["<C-n>"] = cmp.mapping.select_next_item(),
--     ["<C-d>"] = cmp.mapping.scroll_docs(-4),
--     ["<C-f>"] = cmp.mapping.scroll_docs(4),
--     ["<C-Space>"] = cmp.mapping.complete(),
--     ["<C-e>"] = cmp.mapping.abort(),
--     ["<CR>"] = cmp.mapping.confirm({
--       behavior = cmp.ConfirmBehavior.Replace,
--       select = false,
--     }),
--     ["<Tab>"] = vim.schedule_wrap(function(fallback)
--       if cmp.visible() and has_words_before() then
--         cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
--       else
--         fallback()
--       end
--     end),
--     ["<S-Tab>"] = cmp.mapping(function(fallback)
--       if cmp.visible() then
--         cmp.select_prev_item()
--       elseif luasnip.jumpable(-1) then
--         luasnip.jump(-1)
--       else
--         fallback()
--       end
--     end, {
--       "i",
--       "s",
--     }),
--   }),
--   -- Completion sources (order matters)
--   sources = cmp.config.sources({
--     { name = "copilot" },
--     { name = "luasnip" },
--     { name = "nvim_lsp" },
--     { name = "buffer" },
--     { name = "nvim_lua" },
--     { name = "path" },
--   }),
-- })
--
-- cmp.setup.cmdline(':', {
--   mappings = cmp.mapping.preset.cmdline(),
--   sources = cmp.config.sources({
--     { name = "path" }
--   }, {
--     { name = 'cmdline' }
--   })
-- })
--
-- vim.cmd [[
--   set completeopt=menuone,noinsert,noselect
--   highlight! default link CmpItemKind CmpItemMenuDefault
-- ]]
